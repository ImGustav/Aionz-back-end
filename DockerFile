# --- build stage ---
FROM node:22.15

# Define o diretório de trabalho dentro do container
WORKDIR /app

# Copia os arquivos de gerenciamento de pacotes
COPY package*.json ./

# Copia o schema do Prisma para gerar o cliente
COPY prisma ./prisma/

# Instala todas as dependências (incluindo devDependencies para build)
RUN npm ci

# Gera o cliente Prisma
RUN npx prisma generate

# Copia todo o restante do código-fonte
COPY . .

# Executa o build do NestJS (compila TS para JS na pasta 'dist')
RUN npm run build

# --- production stage ---
# Inicia uma nova imagem limpa
FROM node:22.15

WORKDIR /app

# Cria um usuário não-root para rodar a aplicação por segurança
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Copia os arquivos de gerenciamento de pacotes
COPY package*.json ./

# Copia o schema do Prisma (necessário para o runtime e migrações)
COPY prisma ./prisma/

# Instala APENAS as dependências de produção
RUN npm ci --omit=dev

# Gera o cliente Prisma para a instalação de produção
RUN npx prisma generate

# Copia o código compilado ('dist') do stage 'builder'
COPY --from=builder /app/dist ./dist

# Copia a pasta 'public' (para os uploads e arquivos estáticos)
# O 'chown' é necessário se o 'builder' for root
COPY --from=builder --chown=appuser:appgroup /app/public ./public

# Copia o script de entrypoint
COPY docker-entrypoint.sh .
RUN chmod +x docker-entrypoint.sh

# Garante que o usuário 'appuser' tenha posse da pasta de uploads
# (A sua factory do Multer cria a pasta, mas garantimos aqui)
RUN mkdir -p ./public/uploads && chown -R appuser:appgroup .

# Mudar para o usuário não-root
USER appuser

# Expõe a porta que a aplicação NestJS roda
EXPOSE 3000

# Define o entrypoint para rodar o script
ENTRYPOINT ["./docker-entrypoint.sh"]

# Comando padrão para iniciar a aplicação (será executado pelo entrypoint)
CMD ["npm", "run", "start:prod"]